# Generated by Django 5.2.1 on 2025-06-26 05:39

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import django_resized.forms
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FandomProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fandom_card', models.ImageField(upload_to='fandom_cards/')),
                ('is_verified_fandom', models.BooleanField(default=False)),
                ('is_pending_verification', models.BooleanField(default=False)),
                ('verification_failed', models.BooleanField(default=False)),
                ('verification_start_date', models.DateField(verbose_name='인증 시작일')),
                ('verification_end_date', models.DateField(verbose_name='인증 만료일')),
                ('applied_at', models.DateTimeField()),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='MannerReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(choices=[(1, '1점'), (2, '2점'), (3, '3점'), (4, '4점'), (5, '5점')], verbose_name='전반적인 거래 만족도')),
                ('description_match', models.CharField(max_length=50, verbose_name='상품 상태 일치 여부')),
                ('response_speed', models.CharField(max_length=50, verbose_name='응답 속도')),
                ('politeness', models.CharField(max_length=50, verbose_name='메시지 말투')),
                ('deal_again', models.CharField(max_length=10, verbose_name='재거래 의사')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('reason', models.CharField(choices=[('profanity', '욕설, 불쾌한 표현 사용'), ('hate_spam', '혐오 발언, 반복적 광고, 선정적 내용'), ('illegal', '불법 콘텐츠, 범죄, 개인정보 노출'), ('irrelevant', '관련성이 낮은 게시글')], max_length=20, verbose_name='신고 사유')),
                ('additional_info', models.TextField(blank=True, verbose_name='추가 설명')),
                ('status', models.CharField(choices=[('pending', '검토 중'), ('approved', '신고 승인'), ('rejected', '신고 반려'), ('resolved', '처리 완료')], default='pending', max_length=20, verbose_name='처리 상태')),
                ('admin_notes', models.TextField(blank=True, verbose_name='관리자 메모')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='처리 일시')),
                ('restriction_start', models.DateTimeField(blank=True, null=True, verbose_name='제재 시작일')),
                ('restriction_end', models.DateTimeField(blank=True, null=True, verbose_name='제재 종료일')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='신고 일시')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정 일시')),
            ],
            options={
                'verbose_name': '게시글 신고',
                'verbose_name_plural': '게시글 신고 목록',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SocialAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(choices=[('kakao', '카카오'), ('naver', '네이버'), ('google', '구글')], max_length=20, verbose_name='소셜 제공자')),
                ('social_id', models.CharField(max_length=100, verbose_name='소셜 ID')),
                ('signup_completed', models.BooleanField(default=False, verbose_name='소셜 가입 완료 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '소셜 계정',
                'verbose_name_plural': '소셜 계정 목록',
            },
        ),
        migrations.CreateModel(
            name='UserSuspension',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suspension_start', models.DateTimeField(verbose_name='제재 시작일')),
                ('suspension_end', models.DateTimeField(blank=True, null=True, verbose_name='제재 종료일')),
                ('suspension_reason', models.TextField(verbose_name='제재 사유')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '사용자 제재',
                'verbose_name_plural': '사용자 제재 목록',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': '이미 사용중인 이메일입니다.'}, max_length=254, unique=True)),
                ('username', models.CharField(error_messages={'unique': '이미 사용 중인 닉네임입니다.'}, max_length=20, unique=True)),
                ('profile_image', django_resized.forms.ResizedImageField(crop=['middle', 'center'], force_format=None, keep_meta=True, quality=-1, scale=None, size=[500, 500], upload_to='profile')),
                ('bio', models.TextField(blank=True, null=True)),
                ('followings', models.ManyToManyField(related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AddressProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('_encrypted_postal_code', models.TextField()),
                ('_encrypted_road_address', models.TextField()),
                ('_encrypted_detail_address', models.TextField()),
                ('_encrypted_phone_number', models.TextField()),
                ('sido', models.CharField(max_length=20)),
                ('sigungu', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='address_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BankProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_code', models.CharField(max_length=10)),
                ('bank_name', models.CharField(max_length=50)),
                ('_encrypted_bank_number', models.TextField()),
                ('bank_holder', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='bank_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BannerRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('artist_name', models.CharField(max_length=100, verbose_name='아티스트명')),
                ('banner_image', models.ImageField(upload_to='user_banners/', verbose_name='배너 이미지')),
                ('ddok_points_used', models.PositiveIntegerField(default=1000, verbose_name='사용된 덕 포인트')),
                ('status', models.CharField(choices=[('pending', '승인 대기'), ('approved', '승인됨'), ('rejected', '거절됨'), ('expired', '만료됨')], default='pending', max_length=20, verbose_name='상태')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='배너 시작일')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='배너 종료일')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 상태')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='승인 일시')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='만료 일시')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='거절 사유')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='신청 일시')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정 일시')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_banners', to=settings.AUTH_USER_MODEL, verbose_name='승인자')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banner_requests', to=settings.AUTH_USER_MODEL, verbose_name='신청자')),
            ],
            options={
                'verbose_name': '배너 신청',
                'verbose_name_plural': '배너 신청 목록',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DdokPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0, verbose_name='쌓인 덕')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 일시')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='최근 변동 일시')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ddok_point', to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '덕 포인트',
                'verbose_name_plural': '덕 포인트 목록',
            },
        ),
        migrations.CreateModel(
            name='DdokPointLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_change', models.IntegerField(verbose_name='변동된 덕')),
                ('reason', models.CharField(choices=[('BIRTHDAY_GAME', '생일시 맞추기'), ('EVENT_PARTICIPATION', '이벤트 참여'), ('POST_REWARD', '게시글 작성 보상'), ('BANNER_REQUEST', '배너 신청'), ('BANNER_REFUND', '배너 신청 환불')], max_length=50, verbose_name='변동 사유')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='기록 일시')),
                ('point_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='accounts.ddokpoint', verbose_name='포인트 소유자')),
            ],
            options={
                'verbose_name': '덕 포인트 로그',
                'verbose_name_plural': '덕덕 포인트 로그 목록',
                'ordering': ['-created_at'],
            },
        ),
    ]
